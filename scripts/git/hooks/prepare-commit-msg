#!/usr/bin/env bun

/**
 * This script is the source of the prepare-commit-msg git hook
 *
 * What is does:
 * - reads `git diff --staged` to get changed files ready for commiting
 * - passes that plus a pre-baked prompt as context to a local llm api at the /generate endpoint
 * - llm returns a generated commit message
 * - ai commit msg is writen to commit message file
 * - git commit is executed & open in editor of choice
 *
 * Usage:
 * - git commit
 */

import { $ } from "bun";
import process from "process";
import { readFileSync, writeFileSync } from 'node:fs';
const { log, error } = console;

type CommitType = 'message' | 'template' | 'merge' | 'squash' | 'commit' | undefined;

/**
 * Try catch wrapper for async functions
 */
async function tryCatch(cb: Function): Promise<any> {
  try {
    const res = await cb();
    return [null, res];
  } catch (e) {
    return [new Error(e), null];
  }
}

/**
 * Get commit message from LLM w/ git diff as context & pre-baked prompt
 */
async function getCommitMsg(diff: string): Promise<string> {
  const prompt = `Generate a concise, yet descriptive, conventional commit message based on the following git diff.
      Use one of these types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert.
      Format: <type>(<optional scope>): <description>
      For example:
      feat(ui): add login button so that user can login
      fix(api): correct user authentication bug to prevent "x"
      refactor: simplify conditional logic in parser to make it easier to do "x"
      Here's the git diff:
      ${diff}`;
  const model = await $`skate get prepare-commit-msg-model`.text();
  log('ðŸ¤– Using model: ', model);
  const data = {
    model,
    prompt,
    stream: false,
  };

  return $`curl http://localhost:11434/api/generate -d '${JSON.stringify(data)}'`.text();
}

/**
  * Merge the original commit message with the AI generated commit message
  */
function createCommitMsg(ogMsg: string, aiMsg: string, type: CommitType): string {
  if (type === 'merge' || type === 'squash') {
    return ogMsg;
  }

  const lines = ogMsg.split('\n');
  const linesWithAiMsg = [aiMsg, ...lines];

  return linesWithAiMsg.join('\n');
}

/**
  * Get staged diff, pass to LLM, get ai msg, merge w/ og commit msg & write to commitMsgfile
  */
async function main(): Promise<void> {
  const [, , commitMsgFile, commitType] = process.argv;

  // End if no commit msg file
  if (!commitMsgFile) {
    error('Error: No commit message file provided');
    process.exit(1);
  }

  // git staged diffs
  const diff = await $`git diff --staged`.text();

  // get commit msg from LLM
  const [aiError, aiResponse] = await tryCatch(async (): Promise<string> => {
    const res = await getCommitMsg(diff);
    return JSON.parse(res).response;
  });

  // End if errored response from LLM or json parsing
  if (aiError) {
    error('Error: could not get response from local LLM - ', aiError);
    process.exit(1);
  }

  // merge base commit msg w/ ai commit msg & write back to commit msg file
  const [commitError] = await tryCatch(() => {
    const commitMsg = readFileSync(commitMsgFile, 'utf8');
    const aiCommitMsg = createCommitMsg(commitMsg, aiResponse, commitType);

    writeFileSync(commitMsgFile, aiCommitMsg);
  });

  // end if error writing to commit msg file
  if (commitError) {
    error('Error processing commit msg: ', commitError);
    process.exit(1);
  }
}

main();
